version: '3'
services:
  # 서비스 1
  mysql:
    container_name: mysql
    # 사용할 이미지
    image: mysql:8.0.17
    restart: always
    # 접근 포트 => 컨테이너 외부: 컨테이너 내부 (* mysql 내부 포트 변경 x)
    ports:
      - 3306:3306
    volumes:
      # 설정파일
      - ./mysql/conf.d:/etc/mysql/conf.d
      # DB 데이터 host 디렉토리로 마운트
      - ./mysql/data:/var/lib/mysql
      # mysql 초기 데이터 init(*알파벳 순으로 실행)
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    # env 파일로 DB 계정 설정
    env_file: ./mysql/.env
    networks:
      - backend

  # 서비스 2
  redis:
    container_name: redis
    image: redis
    restart: always
    # 실행에 설정파일 주입
    command: redis-server --include /usr/local/etc/redis/redis.conf
    ports:
      - '6379:6379'
    volumes:
      - ./redis/data:/data/redis
      # https://redis.io/topics/config 에서 필요한 설정 버전 다운하여 적용
      # 필수 설정 1) requirepass, 2) bind
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - TZ=Asia/Seoul
    networks:
      - backend

  # 서비스 3 - api server : ts + express
  api:
    container_name: api
    build:
      context: ./project_bmw_back
    expose:
      - '8080'
    depends_on:
      - mysql
      - redis
    volumes:
      # (필수) 컨테이너에서 모듈과 빌드된 파일을 사용할 수 있도록 알려야함.
      - ./project_bmw_back:/usr/app
      - /usr/app/node_modules
      - /usr/app/dist
      - ./logs/api:/usr/app/logs
      # - ./logs/api:/root/.npm/_logs/
    environment:
      - TZ=Asia/Seoul
    stdin_open: true
    tty: true
    networks:
      - backend

  # 서비스 4 - nginx + react
  nginx:
    container_name: nginx
    build:
      # client와 같은 이미지 사용
      context: ./project_bmw_front
    restart: always
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - api
    volumes:
      # (필수) 로컬 설정파일 => nginx 설정파일에 마운트
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./logs/nginx:/var/log/nginx/
      # openssl 전용
      - ./nginx/ssl/host:/etc/nginx/ssl
      ## certbot 전용 => certbot와 동일한 디렉토리를 마운트 ##
      # - ./certbot/conf:/etc/letsencrypt
      # - ./certbot/www:/var/www/certbot
    ## 인증서 자동 재발급 1. ##
    # command : "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    environment:
      - TZ=Asia/Seoul
    stdin_open: true # docker run -i : Interactive 모드 사용으로 표준입출력 사용
    tty: true # docker run -t : 텍스트 기반의 터미널(TTY)을 애뮬레이션해주는 옵션
    networks:
      - backend

  ## TODO: iptime ddns에서는 사용불가, 정식 도메인 구입후 적용 예정 ##
  # 서비스 - certbot
  # certbot:  #certbot 컨테이너 추가
  #   container_name: certbot
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #     - ./logs/certbot:/var/log/letsencrypt
  #   depends_on:
  #     - nginx
  ## 인증서 자동 재발급 2. ##
  #   entrypoint : "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

# volumes:
#   test_volume:

networks:
  backend:
    driver: bridge
